# H∆∞·ªõng d·∫´n t·∫°o c·∫•u tr√∫c th∆∞ m·ª•c v√† file:
# employee_profile_app/
# ‚îú‚îÄ‚îÄ main.py
# ‚îú‚îÄ‚îÄ pages/
# ‚îÇ   ‚îî‚îÄ‚îÄ 1_Cap_nhat_Ho_so.py
# ‚îú‚îÄ‚îÄ utils/
# ‚îÇ   ‚îú‚îÄ‚îÄ database.py
# ‚îÇ   ‚îî‚îÄ‚îÄ helpers.py
# ‚îú‚îÄ‚îÄ assets/
# ‚îÇ   ‚îî‚îÄ‚îÄ hospital_logo.png (T√πy ch·ªçn, kh√¥ng b·∫Øt bu·ªôc cho m√£ n√†y)
# ‚îú‚îÄ‚îÄ .streamlit/
# ‚îÇ   ‚îî‚îÄ‚îÄ config.toml
# ‚îî‚îÄ‚îÄ requirements.txt

# --- requirements.txt ---
# streamlit
# pandas
# plotly
# openpyxl

# --- .streamlit/config.toml ---
# [theme]
# base="light"
# primaryColor="#1E90FF" # Royal Blue
# backgroundColor="#F0F8FF" # Alice Blue
# secondaryBackgroundColor="#FFFFFF"
# font="sans serif"

# --- utils/database.py ---
import streamlit as st
import pandas as pd
import io

# --- C·∫•u h√¨nh trang (Page Configuration) ---
import streamlit as st

DB_NAME = "employee_data.db"

# S·ª≠ d·ª•ng cache_resource ƒë·ªÉ k·∫øt n·ªëi CSDL ch·ªâ m·ªôt l·∫ßn
@st.cache_resource
def get_db_connection():
    """T·∫°o v√† tr·∫£ v·ªÅ m·ªôt k·∫øt n·ªëi t·ªõi CSDL SQLite."""
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    return conn

def init_db():
    """Kh·ªüi t·∫°o c√°c b·∫£ng trong CSDL n·∫øu ch√∫ng ch∆∞a t·ªìn t·∫°i."""
    conn = get_db_connection()
    c = conn.cursor()
    # B·∫£ng l∆∞u th√¥ng tin nh√¢n vi√™n
    c.execute('''
        CREATE TABLE IF NOT EXISTS employees (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            ho_ten TEXT NOT NULL,
            tuoi INTEGER NOT NULL,
            khoa_phong TEXT NOT NULL,
            chuc_danh TEXT NOT NULL,
            trang_thai TEXT NOT NULL,
            thoi_gian_cap_nhat TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    # B·∫£ng l∆∞u c√°c y√™u c·∫ßu h·ªó tr·ª£
    c.execute('''
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            noi_dung TEXT NOT NULL,
            thoi_gian_gui TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()

def save_employee_data(ho_ten, tuoi, khoa_phong, chuc_danh, trang_thai):
    """L∆∞u th√¥ng tin nh√¢n vi√™n v√†o CSDL."""
    conn = get_db_connection()
    c = conn.cursor()
    try:
        c.execute('''
            INSERT INTO employees (ho_ten, tuoi, khoa_phong, chuc_danh, trang_thai)
            VALUES (?, ?, ?, ?, ?)
        ''', (ho_ten, tuoi, khoa_phong, chuc_danh, trang_thai))
        conn.commit()
        return True
    except sqlite3.Error as e:
        st.error(f"L·ªói CSDL: {e}")
        return False

def save_support_request(noi_dung):
    """L∆∞u y√™u c·∫ßu h·ªó tr·ª£ v√†o CSDL."""
    conn = get_db_connection()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO requests (noi_dung) VALUES (?)', (noi_dung,))
        conn.commit()
        return True
    except sqlite3.Error as e:
        st.error(f"L·ªói CSDL: {e}")
        return False

@st.cache_data(ttl=600)  # Cache d·ªØ li·ªáu trong 10 ph√∫t
def get_all_data():
    """L·∫•y to√†n b·ªô d·ªØ li·ªáu nh√¢n vi√™n t·ª´ CSDL v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng DataFrame."""
    conn = get_db_connection()
    try:
        df = pd.read_sql_query("SELECT ho_ten, tuoi, khoa_phong, chuc_danh, trang_thai, thoi_gian_cap_nhat FROM employees", conn)
        return df
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

# --- utils/helpers.py ---
import pandas as pd
import plotly.express as px
from io import BytesIO

def create_excel_report(df: pd.DataFrame):
    """Chuy·ªÉn ƒë·ªïi DataFrame th√†nh file Excel trong b·ªô nh·ªõ."""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='BaoCaoNhanSu')
    processed_data = output.getvalue()
    return processed_data

def plot_status_pie(df: pd.DataFrame):
    """V·∫Ω bi·ªÉu ƒë·ªì tr√≤n th·ªÉ hi·ªán t·ª∑ l·ªá tr·∫°ng th√°i."""
    if df.empty or 'trang_thai' not in df.columns:
        return None
    status_counts = df['trang_thai'].value_counts().reset_index()
    status_counts.columns = ['Tr·∫°ng th√°i', 'S·ªë l∆∞·ª£ng']
    fig = px.pie(status_counts, names='Tr·∫°ng th√°i', values='S·ªë l∆∞·ª£ng',
                 title='T·ª∑ l·ªá Tr·∫°ng th√°i C·∫≠p nh·∫≠t H·ªì s∆°', hole=.3)
    fig.update_traces(textposition='inside', textinfo='percent+label')
    return fig

def plot_department_bar(df: pd.DataFrame):
    """V·∫Ω bi·ªÉu ƒë·ªì c·ªôt th·ªÉ hi·ªán s·ªë l∆∞·ª£ng nh√¢n vi√™n theo khoa/ph√≤ng."""
    if df.empty or 'khoa_phong' not in df.columns:
        return None
    dept_counts = df['khoa_phong'].value_counts().reset_index()
    dept_counts.columns = ['Khoa/Ph√≤ng', 'S·ªë l∆∞·ª£ng']
    fig = px.bar(dept_counts, x='Khoa/Ph√≤ng', y='S·ªë l∆∞·ª£ng',
                 title='Th·ªëng k√™ theo Khoa/Ph√≤ng/Trung t√¢m', text_auto=True)
    return fig

def plot_title_bar(df: pd.DataFrame):
    """V·∫Ω bi·ªÉu ƒë·ªì c·ªôt th·ªÉ hi·ªán s·ªë l∆∞·ª£ng nh√¢n vi√™n theo ch·ª©c danh."""
    if df.empty or 'chuc_danh' not in df.columns:
        return None
    title_counts = df['chuc_danh'].value_counts().reset_index()
    title_counts.columns = ['Ch·ª©c danh', 'S·ªë l∆∞·ª£ng']
    fig = px.bar(title_counts, x='Ch·ª©c danh', y='S·ªë l∆∞·ª£ng',
                 title='Th·ªëng k√™ theo Ch·ª©c danh', text_auto=True)
    return fig

def plot_age_histogram(df: pd.DataFrame):
    """V·∫Ω bi·ªÉu ƒë·ªì histogram ph√¢n b·ªï ƒë·ªô tu·ªïi."""
    if df.empty or 'tuoi' not in df.columns:
        return None
    fig = px.histogram(df, x='tuoi', nbins=10,
                       title='Ph√¢n b·ªï ƒê·ªô tu·ªïi Nh√¢n vi√™n')
    return fig

# --- main.py ---
import streamlit as st
from utils.database import init_db

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(
    page_title="H·ªá th·ªëng C·∫≠p nh·∫≠t H·ªì s∆° Nh√¢n vi√™n",
    page_icon="üè•",
    layout="wide"
)

# Kh·ªüi t·∫°o CSDL khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông l·∫ßn ƒë·∫ßu
init_db()

# Giao di·ªán trang ch·ªß
st.title("üè• Ch√†o m·ª´ng ƒë·∫øn v·ªõi H·ªá th·ªëng C·∫≠p nh·∫≠t H·ªì s∆° Nh√¢n vi√™n")
st.markdown("---")
st.info(
    """
    **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**

    1.  Vui l√≤ng di chuy·ªÉn ƒë·∫øn trang **C·∫≠p nh·∫≠t H·ªì s∆°** ·ªü thanh c√¥ng c·ª• b√™n tr√°i.
    2.  ƒêi·ªÅn ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c c√°c th√¥ng tin c√° nh√¢n v√†o bi·ªÉu m·∫´u.
    3.  Nh·∫•n n√∫t **"G·ª≠i th√¥ng tin"** ƒë·ªÉ ho√†n t·∫•t.
    4.  Ng∆∞·ªùi qu·∫£n l√Ω c√≥ th·ªÉ xem c√°c b√°o c√°o tr·ª±c quan v√† t·∫£i d·ªØ li·ªáu t·ªïng h·ª£p t·∫°i c√πng trang ƒë√≥.
    5.  N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng s·ª≠ d·ª•ng m·ª•c **"Y√™u c·∫ßu H·ªó tr·ª£"** ·ªü cu·ªëi trang.

    *Tr√¢n tr·ªçng c·∫£m ∆°n s·ª± h·ª£p t√°c c·ªßa b·∫°n!*
    """
)

# --- pages/1_Cap_nhat_Ho_so.py ---
import streamlit as st
import pandas as pd
from utils.database import save_employee_data, get_all_data, save_support_request
from utils.helpers import (
    create_excel_report,
    plot_status_pie,
    plot_department_bar,
    plot_title_bar,
    plot_age_histogram
)

st.set_page_config(page_title="C·∫≠p nh·∫≠t & B√°o c√°o", page_icon="üìù")

st.title("üìù M·∫´u C·∫≠p nh·∫≠t Th√¥ng tin H·ªì s∆° Nh√¢n vi√™n")

# --- DANH M·ª§C L·ª∞A CH·ªåN (c√≥ th·ªÉ l·∫•y t·ª´ CSDL ho·∫∑c file c·∫•u h√¨nh) ---
KHOA_PHONG_OPTIONS = ["Khoa N·ªôi", "Khoa Ngo·∫°i", "Khoa S·∫£n", "Khoa Nhi", "Trung t√¢m X√©t nghi·ªám", "Ph√≤ng H√†nh ch√≠nh"]
CHUC_DANH_OPTIONS = ["B√°c sƒ©", "ƒêi·ªÅu d∆∞·ª°ng", "K·ªπ thu·∫≠t vi√™n", "D∆∞·ª£c sƒ©", "Nh√¢n vi√™n H√†nh ch√≠nh", "L√£nh ƒë·∫°o khoa"]
TRANG_THAI_OPTIONS = ["Ho√†n t·∫•t", "1 ph·∫ßn", "Ch∆∞a b·∫Øt ƒë·∫ßu"]

# --- FORM NH·∫¨P LI·ªÜU ---
with st.form("employee_form", clear_on_submit=True):
    st.subheader("I. Th√¥ng tin c√° nh√¢n")
    ho_ten = st.text_input("H·ªç v√† t√™n", placeholder="Nguy·ªÖn VƒÉn A")
    tuoi = st.number_input("Tu·ªïi", min_value=18, max_value=70, step=1)
    khoa_phong = st.selectbox("Khoa/Ph√≤ng/Trung t√¢m", options=KHOA_PHONG_OPTIONS)
    chuc_danh = st.selectbox("Ch·ª©c danh", options=CHUC_DANH_OPTIONS)
    trang_thai = st.selectbox("Tr·∫°ng th√°i c·∫≠p nh·∫≠t h·ªì s∆°", options=TRANG_THAI_OPTIONS, help="Vui l√≤ng ch·ªçn tr·∫°ng th√°i ho√†n th√†nh h·ªì s∆° c·ªßa b·∫°n.")

    submitted = st.form_submit_button("‚úÖ G·ª≠i th√¥ng tin")

if submitted:
    # Validate input
    if not ho_ten:
        st.warning("Vui l√≤ng nh·∫≠p H·ªç v√† t√™n.")
    else:
        with st.spinner("ƒêang l∆∞u th√¥ng tin..."):
            success = save_employee_data(ho_ten, tuoi, khoa_phong, chuc_danh, trang_thai)
            if success:
                st.success("C·∫£m ∆°n b·∫°n! Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n th√†nh c√¥ng.")
                # X√≥a cache ƒë·ªÉ dashboard c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
                st.cache_data.clear()
            else:
                st.error("ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")

st.markdown("---")

# --- DASHBOARD V√Ä B√ÅO C√ÅO (D√ÄNH CHO QU·∫¢N L√ù) ---
st.header("üìä Dashboard v√† B√°o c√°o T·ªïng h·ª£p")
all_data = get_all_data()

if all_data.empty:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c ghi nh·∫≠n.")
else:
    st.subheader("T·∫£i B√°o c√°o")
    excel_data = create_excel_report(all_data)
    st.download_button(
        label="üì• T·∫£i xu·ªëng file Excel",
        data=excel_data,
        file_name=f"BaoCaoNhanSu_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    st.subheader("Bi·ªÉu ƒë·ªì Tr·ª±c quan")
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(plot_status_pie(all_data), use_container_width=True)
        st.plotly_chart(plot_department_bar(all_data), use_container_width=True)
    with col2:
        st.plotly_chart(plot_age_histogram(all_data), use_container_width=True)
        st.plotly_chart(plot_title_bar(all_data), use_container_width=True)

    st.subheader("Xem D·ªØ li·ªáu Th√¥")
    with st.expander("Nh·∫•n ƒë·ªÉ xem b·∫£ng d·ªØ li·ªáu chi ti·∫øt"):
        st.dataframe(all_data)

st.markdown("---")

# --- FORM H·ªñ TR·ª¢ ---
st.header("üí¨ Y√™u c·∫ßu H·ªó tr·ª£")
with st.form("support_form", clear_on_submit=True):
    noi_dung_ho_tro = st.text_area("N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc ho·∫∑c c·∫ßn h·ªó tr·ª£, vui l√≤ng nh·∫≠p n·ªôi dung v√†o ƒë√¢y:")
    submit_request = st.form_submit_button("G·ª≠i y√™u c·∫ßu")

if submit_request and noi_dung_ho_tro:
    with st.spinner("ƒêang g·ª≠i y√™u c·∫ßu..."):
        success = save_support_request(noi_dung_ho_tro)
        if success:
            st.success("Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.")
        else:
            st.error("Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.")
elif submit_request:
    st.warning("Vui l√≤ng nh·∫≠p n·ªôi dung y√™u c·∫ßu.")
